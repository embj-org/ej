name: Tag, Release and Build Docker Image

on:
  push:
    branches: ["main"]

permissions:
  contents: write

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      tag_created: ${{ steps.create_tag.outputs.tag_created }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      PREVIOUS_TAG: ${{ steps.get_latest_tag.outputs.PREVIOUS_TAG }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Retrieves the latest tag or defaults to the initial commit if no tags exist
          # For the release job, we use PREVIOUS_TAG to determine all commits between this reference point and HEAD
          # Using the repository's first commit as fallback ensures we capture the complete history when needed
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Get the current version
        id: get_version
        run: |
          VERSION=v$(cat Cargo.toml | grep -m 1 version | grep -o -P "\d+\.\d+\.\d+")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create tag
        if: ${{env.VERSION != env.PREVIOUS_TAG}}
        id: create_tag
        run: |
          git tag ${{env.VERSION}}
          git push origin ${{env.VERSION}}
          echo "tag_created=true" >> $GITHUB_OUTPUT
  release:
    needs: tag
    if: needs.tag.outputs.tag_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Info
        run: |
          echo ${{ needs.tag.outputs.PREVIOUS_TAG }}
          echo ${{ needs.tag.outputs.VERSION }}
          echo ${{ needs.tag.outputs.tag_created }}
          echo ${{ needs.tag.outputs }}

      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the list of commits since the last release
        id: commit_log
        run: |
          echo "$(git log ${{ needs.tag.outputs.PREVIOUS_TAG }}..@ --pretty=format:'- (%h) %s (%an)')" >> release.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag.outputs.VERSION }}
          release_name: ${{ needs.tag.outputs.VERSION }}
          draft: false
          body_path: release.md
          prerelease: false 
  docker:
    needs: tag
    runs-on: ubuntu-latest
    if: needs.tag.outputs.tag_created == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./crates/services/ejdispatcher/Dockerfile
            image: ghcr.io/embj-org/ejd
          - dockerfile: ./crates/services/ejbuilder/Dockerfile
            image: ghcr.io/embj-org/ejb
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{matrix.image}}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.tag.outputs.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.tag.outputs.VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          file: ${{ matrix.dockerfile }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=registry,ref=${{ matrix.image }}:latest
          cache-to: type=inline
